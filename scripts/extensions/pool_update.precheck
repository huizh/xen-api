#!/usr/bin/env python

import xmlrpclib, sys
import XenAPI
import time
import json
import urllib2
import xml.dom.minidom
import traceback
import subprocess
import os

def success_message(params):
    rpcparams = { 'Status': 'Success', 'Value': json.dumps(params) }
    return xmlrpclib.dumps((rpcparams, ), '', True)

def failure_message(code, params):
    rpcparams = { 'Status': 'Failure', 'ErrorDescription': json.dumps([ code ] + params) }
    return xmlrpclib.dumps((rpcparams, ), '', True)

def parse_control_package(yum_url):
    open('/tmp/precheck.log', 'ab').write('%s %s\n' % (time.ctime(), yum_url))
    control_package = ''
    parse_done = False
    if yum_url.startswith(('file://', '/')):
        # If it's shared storage, parse update.xml to fetch the control package name.
        try:
            update_uuid = session.xenapi.pool_update.get_uuid(update)
            update_xml = '/var/update/' + update_uuid + '/vdi/update.xml'
            xmldoc = xml.dom.minidom.parse(update_xml)
            itemlist = xmldoc.getElementsByTagName('update')
            if itemlist[0].hasAttribute('control'):
                control_package = itemlist[0].getAttribute('control')
            parse_done = True
        except Exception as e:
            print (failure_message('PATCH_PRECHECK_FAILED_UNKNOWN_ERROR', ['Exception: Parse Control Package from shared storage. ' + str(e) + '\n' + traceback.format_exc()]))
            return control_package, parse_done
    elif yum_url.startswith(('http://', 'https://')):
        # If it's on local storage, the yum is exposed as HTTP URL.
        # Fetch update.xml to local and parse to fetch the control package name.
        try:
            update_xml = yum_url + '/update.xml'
            xmldoc = urllib2.urlopen(update_xml).read()
            itemlist = xmldoc.getElementsByTagName('update')
            if itemlist[0].hasAttribute('control'):
                control_package = itemlist[0].getAttribute('control')
            parse_done = True
        except Exception as e:
            print (failure_message('PATCH_PRECHECK_FAILED_UNKNOWN_ERROR', ['Exception: Parse Control Package from http server. ' + str(e) + '\n' + traceback.format_exc()]))
            return control_package, parse_done
    else:
        print (failure_message('PATCH_PRECHECK_FAILED_UNKNOWN_ERROR', ['Incorrect yum repo.']))
    return control_package, parse_done

#def execute_precheck(yum_url, control_package):
def execute_precheck(control_package):
    # TODO: handle the error message, need structured message
    fist_file = '/tmp/fist_allowed_unsigned_updates'
    precheck_pass = False
    precheck_message = ''
    try:
        open('/tmp/precheck.log', 'ab').write('%s %s\n' % (time.ctime(), control_package))
        FNULL = open(os.devnull, 'w')
        #retcode = subprocess.call('yum install ' + control_package, shell=True, stdout = FNULL, stderr = FNULL)
        # yum.conf is located at /var/update/<uuid>/yum.conf
        update_uuid = session.xenapi.pool_update.get_uuid(update)
        yum_conf = '/var/update/' + update_uuid + '/yum.conf'
        open('/tmp/precheck.log', 'ab').write('%s %s\n' % (time.ctime(), yum_conf))
        allow_unsigned = False
        if os.path.exists(fist_file):
            allow_unsigned = update_uuid in open(fist_file, 'rb').read().split()
        nogpgcheck = ' --nogpgcheck ' if allow_unsigned else ' '
        retcode = subprocess.call('yum -c ' + yum_conf + ' install -y ' + nogpgcheck + control_package, shell=True, stdout = FNULL, stderr = FNULL)
        if retcode == 0:
            open('/tmp/precheck.log', 'ab').write('%s %d\n' % (time.ctime(), retcode))
            precheck_pass = True
            precheck_message = 'Precheck passed.'
        else:
            open('/tmp/precheck.log', 'ab').write('%s %d\n' % (time.ctime(), retcode))
            precheck_message = ['Failure: Precheck execution failed.']
    except Exception as e:
        precheck_message = ['Exception: Precheck execution failed. ' + str(e) + '\n' + traceback.format_exc()]
    return precheck_pass, precheck_message


if __name__ == '__main__':
    txt = sys.stdin.read()
    params, method = xmlrpclib.loads(txt)

    session = None
    try:
        session = XenAPI.xapi_local()
        session.xenapi.login_with_password('root', '', '', 'Pool_update')

        open('/tmp/precheck.log', 'ab').write('%s %s\n' % (time.ctime(), params))
        update = params[1]
        host = params[2]
        # attach and get the yum URL
        yum_url = session.xenapi.pool_update.attach(update, host)
        open('/tmp/precheck.log', 'ab').write('%s %s\n' % (time.ctime(), yum_url))
        control_package, parse_done = parse_control_package(yum_url)

        if parse_done:
            if control_package == '':
                print (success_message('Precheck is not required for this update.'))
            else:
                #execute_precheck (control_package)
                precheck_pass, precheck_message = execute_precheck (control_package)
                open('/tmp/precheck.log', 'ab').write('%s %s\n' % (time.ctime(),precheck_pass))
                open('/tmp/precheck.log', 'ab').write('%s %s\n' % (time.ctime(),precheck_message))
                if precheck_pass:
                    print (success_message(precheck_message))
                else:
                    print (failure_message('PATCH_PRECHECK_FAILED_UNKNOWN_ERROR', precheck_message))
    except Exception as e:
        print (failure_message('PATCH_PRECHECK_FAILED_UNKNOWN_ERROR', ['Exception: Precheck failed: ' + str(e) + '\n' + traceback.format_exc()]))
    finally:
        if session is not None:
            session.xenapi.pool_update.detach(update, host)
            session.xenapi.session.logout()
