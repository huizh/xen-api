#!/usr/bin/env python

import xmlrpclib, sys
import json
import urllib2
import xml

def success_message():
    rpcparams = { 'Status': 'Success' }
    return xmlrpclib.dumps((rpcparams, ), '', True)

def failure_message(code, params):
    rpcparams = { 'Status': 'Failure', 'ErrorDescription': json.dumps([ code ] + params) }
    return xmlrpclib.dumps((rpcparams, ), '', True)

def parse_control_package(yum_url):
	control_package = ''
	parse_done = False
    if yum_url.startswith('file'):
        # If it's shared storage, parse update.xml to fetch the control package name.
        try:
	        update_uuid = session.xenapi.pool_update.get_uuid(update)
	        update_xml = '/var/update/' + update_uuid + '/vdi/update.xml'
	        xmldoc = xml.dom.minidom.parse(update_xml)
	        itemlist = xmldoc.getElementsByTagName('update')
	        if itemlist[0].hasAttribute('control'):
				control_package = itemlist[0].getAttribute['control']
	        parse_done = True
	    except:
			print (failure_message("PrecheckFailure", ["Incorrect yum repo."]))
			return control_package, parse_done
	elif yum_url.startswith('http'):
		# TODO: consider if it's https
		# If it's on local storage, the yum is exposed as HTTP URL.
		# Fetch update.xml to local and parse to fetch the control package name.
		try:
			update_xml = yum_url + '/update.xml'
			xmldoc = urllib2.urlopen(update_xml).read()
			itemlist = xmldoc.getElementsByTagName('update')
	        if itemlist[0].hasAttribute('control'):
				control_package = itemlist[0].getAttribute['control']
	        parse_done = True
	    except:
			print (failure_message("PrecheckFailure", ["Incorrect yum repo."]))
			return control_package, parse_done
	else:
		print (failure_message("PrecheckFailure", ["Incorrect yum repo."]))
		parse_done = False
	return control_package, parse_done

def execute_precheck(control_package):
	# TODO: handle the error message, need structured message
    from subprocess import call
	try:
		retcode = call("yum install " + control_package, shell=True)
		if retcode == 0:
			print (success_message("Precheck passed."))
		else:
			print (failure_message("PrecheckFailure", ["Precheck failed."]))
	except:
		print (failure_message("PrecheckFailure", ["Precheck failed."]))


if __name__ == "__main__":
    txt = sys.stdin.read()
    params = xmlrpclib.loads(txt)
    print (success_message())

    try:
		session = util.get_localAPI_session()
        if not util.is_master(session):
            print (failure_message("Unsupported", ["Extension can only be"
                   " invoked on a master host."]))

        update = params[1]
        host = params[2]
        # attach and get the yum URL
        yum_url = session.xenapi.pool_update.attach(update, host)
        control_package, parse_done = parse_control(yum_url)

        if not parse_done:
			return

        if control_package == ''
			print (success_message('Precheck is not required for this update.'))
			return

        execute_precheck (control_package)

    except:
        print (failure_message("PrecheckFailure", ["Precheck failed."]))

    finally:
		session.xenapi.pool_update.detach(update, host)
		session.xenapi.session.logout()
