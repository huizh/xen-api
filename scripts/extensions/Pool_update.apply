#!/usr/bin/env python

import xmlrpclib, sys
import json
import urllib2
import xml

def success_message():
    rpcparams = { 'Status': 'Success' }
    return xmlrpclib.dumps((rpcparams, ), '', True)

def failure_message(code, params):
    rpcparams = { 'Status': 'Failure', 'ErrorDescription': json.dumps([ code ] + params) }
    return xmlrpclib.dumps((rpcparams, ), '', True)

def execute_apply(update_package):
	# TODO: handle the error message, need structured message
    from subprocess import call
	try:
		# TODO: Ensure the location.
		# TODO: yum install --enablerepos=<UPDATE_REPO_NAME> <UPDATE_PACKAGE_NAME>
		retcode = call("yum install " + update_package, shell=True)
		if retcode == 0:
			print (success_message("Apply passed."))
		else:
			print (failure_message("ApplyFailure", ["Apply failed."]))
	except:
		print (failure_message("ApplyFailure", ["Apply failed."]))


if __name__ == "__main__":
    txt = sys.stdin.read()
    params = xmlrpclib.loads(txt)
    print (success_message())

    try:
		session = util.get_localAPI_session()
        if not util.is_master(session):
            print (failure_message("Unsupported", ["Extension can only be"
                   " invoked on a master host."]))

        update = params[1]
        host = params[2]
        # attach and get the yum URL
        yum_url = session.xenapi.pool_update.attach(update, host)

        # Precheck
        try:
			session.xenapi.pool_update.precheck(update, host)
        except:
			print (failure_message("PrecheckFailure", ["Precheck failed."]))
			return

		update_package = session.xenapi.pool_update.get_name_label(update)
        execute_apply(update_package)

    except:
        print (failure_message("ApplyFailure", ["Apply failed."]))

    finally:
		session.xenapi.pool_update.detach(update, host)
		session.xenapi.session.logout()
